name: Az-ContainerApp-with-KeyVault

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      GIT_SHA: ${{ github.sha }}
      RESOURCE_GROUP: rg-sbx-ltin
      LOCATION: centralindia
      CONTAINERAPP_ENV: sbx
      CONTAINERAPP_NAME: sbxlokaltalentin
      KEYVAULT_NAME: kv-lokaltalentin
      ACR_SERVER: acrltin.azurecr.io
      IMAGE_NAME: acrltin.azurecr.io/lokaltalentin:$GIT_SHA

      # GitHub secrets mapped here
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
      VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
      VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
      VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
      VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
      VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
      CACHE_CANDIDATES_ENABLED: ${{ secrets.CACHE_CANDIDATES_ENABLED }}
      CACHE_CANDIDATES_MIN_RECORDS: ${{ secrets.CACHE_CANDIDATES_MIN_RECORDS }}
      CACHE_CANDIDATES_TTL: ${{ secrets.CACHE_CANDIDATES_TTL }}
      CACHE_EMPLOYERS_ENABLED: ${{ secrets.CACHE_EMPLOYERS_ENABLED }}
      CACHE_EMPLOYERS_MIN_RECORDS: ${{ secrets.CACHE_EMPLOYERS_MIN_RECORDS }}
      CACHE_EMPLOYERS_TTL: ${{ secrets.CACHE_EMPLOYERS_TTL }}
      CACHE_ENABLED: ${{ secrets.CACHE_ENABLED }}
      CACHE_JOBS_ENABLED: ${{ secrets.CACHE_JOBS_ENABLED }}
      CACHE_JOBS_MIN_RECORDS: ${{ secrets.CACHE_JOBS_MIN_RECORDS }}
      CACHE_JOBS_TTL: ${{ secrets.CACHE_JOBS_TTL }}
      CACHE_MIN_RECORDS: ${{ secrets.CACHE_MIN_RECORDS }}
      CACHE_TTL: ${{ secrets.CACHE_TTL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.ACR_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg VITE_FIREBASE_API_KEY=$VITE_FIREBASE_API_KEY \
            --build-arg VITE_FIREBASE_AUTH_DOMAIN=$VITE_FIREBASE_AUTH_DOMAIN \
            --build-arg VITE_FIREBASE_PROJECT_ID=$VITE_FIREBASE_PROJECT_ID \
            --build-arg VITE_FIREBASE_STORAGE_BUCKET=$VITE_FIREBASE_STORAGE_BUCKET \
            --build-arg VITE_FIREBASE_MESSAGING_SENDER_ID=$VITE_FIREBASE_MESSAGING_SENDER_ID \
            --build-arg VITE_FIREBASE_APP_ID=$VITE_FIREBASE_APP_ID \
            -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Ensure Azure resources exist
        run: |
          az group create --name $RESOURCE_GROUP --location $LOCATION
          az containerapp env show --name $CONTAINERAPP_ENV --resource-group $RESOURCE_GROUP || \
            az containerapp env create --name $CONTAINERAPP_ENV --resource-group $RESOURCE_GROUP --location $LOCATION
          az keyvault show --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP || \
            az keyvault create --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION

      - name: Upload secrets to Azure Key Vault (lowercase, hyphenated names)
        run: |
          secrets="DATABASE_URL SESSION_SECRET REDIS_HOST REDIS_PASSWORD REDIS_PORT FIREBASE_CLIENT_EMAIL FIREBASE_PRIVATE_KEY GOOGLE_API_KEY VITE_FIREBASE_API_KEY VITE_FIREBASE_APP_ID VITE_FIREBASE_AUTH_DOMAIN VITE_FIREBASE_MESSAGING_SENDER_ID VITE_FIREBASE_PROJECT_ID VITE_FIREBASE_STORAGE_BUCKET CACHE_CANDIDATES_ENABLED CACHE_CANDIDATES_MIN_RECORDS CACHE_CANDIDATES_TTL CACHE_EMPLOYERS_ENABLED CACHE_EMPLOYERS_MIN_RECORDS CACHE_EMPLOYERS_TTL CACHE_ENABLED CACHE_JOBS_ENABLED CACHE_JOBS_MIN_RECORDS CACHE_JOBS_TTL CACHE_MIN_RECORDS CACHE_TTL"
          for secret in $secrets; do
            secretname=$(echo "$secret" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
            val="${!secret}"
            echo "Uploading $secret as $secretname to Key Vault"
            az keyvault secret set --vault-name $KEYVAULT_NAME --name "$secretname" --value "$val"
          done

      - name: Create or update Azure Container App with Key Vault secrets (official pattern)
        run: |
          secrets="DATABASE_URL SESSION_SECRET REDIS_HOST REDIS_PASSWORD REDIS_PORT FIREBASE_CLIENT_EMAIL FIREBASE_PRIVATE_KEY GOOGLE_API_KEY VITE_FIREBASE_API_KEY VITE_FIREBASE_APP_ID VITE_FIREBASE_AUTH_DOMAIN VITE_FIREBASE_MESSAGING_SENDER_ID VITE_FIREBASE_PROJECT_ID VITE_FIREBASE_STORAGE_BUCKET CACHE_CANDIDATES_ENABLED CACHE_CANDIDATES_MIN_RECORDS CACHE_CANDIDATES_TTL CACHE_EMPLOYERS_ENABLED CACHE_EMPLOYERS_MIN_RECORDS CACHE_EMPLOYERS_TTL CACHE_ENABLED CACHE_JOBS_ENABLED CACHE_JOBS_MIN_RECORDS CACHE_JOBS_TTL CACHE_MIN_RECORDS CACHE_TTL"

          vault_name="$KEYVAULT_NAME"
          vault_uri="https://$vault_name.vault.azure.net/secrets"

          secrets_arg=""
          env_vars_args=""

          for secret in $secrets; do
            secret_lower=$(echo "$secret" | tr '[:upper:]' '[:lower:]' | tr '_' '-')

            # Build secrets_arg with lowercase secret names (valid KV names)
            if [[ -n "$secrets_arg" ]]; then
              secrets_arg+=","
            fi
            secrets_arg+="${secret_lower}=keyvaultref:${vault_uri}/${secret_lower}"

            # Map env var uppercase to lowercase secret names in env-vars
            env_vars_args+="$secret=$secret_lower "
          done

          if az containerapp show --name "$CONTAINERAPP_NAME" --resource-group "$RESOURCE_GROUP" &> /dev/null; then
            echo "Updating container app..."
            az containerapp update \
              --name "$CONTAINERAPP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --image "$IMAGE_NAME" \
              --secrets "$secrets_arg" \
              --env-vars $env_vars_args
          else
            echo "Creating container app..."
            az containerapp create \
              --name "$CONTAINERAPP_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --environment "$CONTAINERAPP_ENV" \
              --image "$IMAGE_NAME" \
              --target-port 5000 \
              --ingress external \
              --registry-server "$ACR_SERVER" \
              --registry-username "${{ secrets.ACR_USERNAME }}" \
              --registry-password "${{ secrets.ACR_PASSWORD }}" \
              --secrets "$secrets_arg" \
              --env-vars $env_vars_args
          fi
