name: Deploy to Azure Container Apps

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: rg-sbx-ltin
      CONTAINERAPP_NAME: sbxlokaltalentin
      CONTAINERAPP_ENV: sbx
      ACR_NAME: acrltin
      ACR_LOGIN_SERVER: acrltin.azurecr.io
      IMAGE_NAME: acrltin.azurecr.io/lokaltalentin:latest
      KEYVAULT_NAME: kv-lokaltalentin
      LOCATION: centralindia

      # List of secrets keys to upload to Key Vault
      SECRETS_LIST: |
        DATABASE_URL
        SESSION_SECRET
        REDIS_HOST
        REDIS_PASSWORD
        REDIS_PORT
        FIREBASE_CLIENT_EMAIL
        FIREBASE_PRIVATE_KEY
        GOOGLE_API_KEY
        VITE_FIREBASE_API_KEY
        VITE_FIREBASE_APP_ID
        VITE_FIREBASE_AUTH_DOMAIN
        VITE_FIREBASE_MESSAGING_SENDER_ID
        VITE_FIREBASE_PROJECT_ID
        VITE_FIREBASE_STORAGE_BUCKET
        CACHE_CANDIDATES_ENABLED
        CACHE_CANDIDATES_MIN_RECORDS
        CACHE_CANDIDATES_TTL
        CACHE_EMPLOYERS_ENABLED
        CACHE_EMPLOYERS_MIN_RECORDS
        CACHE_EMPLOYERS_TTL
        CACHE_ENABLED
        CACHE_JOBS_ENABLED
        CACHE_JOBS_MIN_RECORDS
        CACHE_JOBS_TTL
        CACHE_MIN_RECORDS
        CACHE_TTL

    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Docker login to ACR
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Ensure Azure resources exist
        run: |
          az group create --name $RESOURCE_GROUP --location $LOCATION
          az containerapp env show --name $CONTAINERAPP_ENV --resource-group $RESOURCE_GROUP || az containerapp env create --name $CONTAINERAPP_ENV --resource-group $RESOURCE_GROUP --location $LOCATION
          az keyvault show --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP || az keyvault create --name $KEYVAULT_NAME --resource-group $RESOURCE_GROUP --location $LOCATION

      - name: Upload GitHub secrets to Azure Key Vault
        run: |
          while IFS= read -r secret; do
            echo "Uploading secret $secret"
            az keyvault secret set --vault-name $KEYVAULT_NAME --name "$secret" --value "${{ secrets[secret] }}"
          done <<< "$SECRETS_LIST"

      - name: Create or update Azure Container App
        run: |
          if az containerapp show --name $CONTAINERAPP_NAME --resource-group $RESOURCE_GROUP &> /dev/null; then
            echo "Updating container app..."
            az containerapp update \
              --name $CONTAINERAPP_NAME \
              --resource-group $RESOURCE_GROUP \
              --image $IMAGE_NAME \
              --set-secrets $(echo $SECRETS_LIST | xargs -n1 -I{} echo {}=kvref:$KEYVAULT_NAME:{}) \
              --set-env-vars $(echo $SECRETS_LIST | xargs -n1 -I{} echo {}=secretref:{})
          else
            echo "Creating container app..."
            az containerapp create \
              --name $CONTAINERAPP_NAME \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINERAPP_ENV \
              --image $IMAGE_NAME \
              --target-port 5000 \
              --ingress external \
              --registry-server $ACR_LOGIN_SERVER \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --set-secrets $(echo $SECRETS_LIST | xargs -n1 -I{} echo {}=kvref:$KEYVAULT_NAME:{}) \
              --set-env-vars $(echo $SECRETS_LIST | xargs -n1 -I{} echo {}=secretref:{})
          fi
